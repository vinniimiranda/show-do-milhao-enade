{"version":3,"sources":["bg.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","bgAudio","Audio","audio","volume","loop","play","useState","option","value","correct","respostas","className","Container","maxWidth","enableMultiContainer","position","toast","POSITION","TOP_RIGHT","Grid","container","spacing","item","xs","style","textAlign","map","resposta","key","onClick","success","error","src","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,gC,+NCkI5BC,MAzHf,WACE,IAEMC,EAAU,IAAIC,MAAMC,KAC1BF,EAAQG,OAAS,GACjBH,EAAQI,MAAO,EAEfJ,EAAQK,OAPK,MASqBC,mBAAS,CACzC,CACEC,OAAQ,IACRC,MAAO,iBACPC,SAAS,GAEX,CACEF,OAAQ,IACRC,MAAO,mBACPC,SAAS,GAEX,CACEF,OAAQ,IACRC,MAAO,qBACPC,SAAS,GAEX,CACEF,OAAQ,IACRC,MAAO,oBACPC,SAAS,GAEX,CACEF,OAAQ,IACRC,MAAO,aACPC,SAAS,KAjCA,mBASNC,EATM,KAqCb,OArCa,KAsCX,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAWC,SAAS,KAAKF,UAAU,aACjC,kBAAC,IAAD,CACEG,sBAAoB,EACpBC,SAAUC,IAAMC,SAASC,YAE3B,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,MAAO,CAAEC,UAAW,YACvC,kBAACN,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACb,yBAAKZ,UAAU,iBACb,uBAAGA,UAAU,YAAb,qGAMJ,kBAACQ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACZb,EAAUgB,KAAI,SAAAC,GAAQ,OACrB,yBAAKhB,UAAU,SAASiB,IAAKD,EAASpB,QACpC,yBACEI,UAAU,SACVkB,QAAS,WACHF,EAASlB,QA3DJO,IAAMc,QAAQ,mBACfd,IAAMe,MAAM,uBAiEtB,0BAAMpB,UAAU,UAAUgB,EAASpB,QACnC,0BAAMI,UAAU,QAAhB,IAAyBgB,EAASnB,aAK1C,kBAACW,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGZ,UAAU,gBAC1B,yBAAKA,UAAU,QACb,uCAAkB,6BAClB,0BAAMA,UAAU,WAAhB,gBAGJ,kBAACQ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGZ,UAAU,gBAC1B,yBAAKA,UAAU,QACb,yCAAoB,6BACpB,0BAAMA,UAAU,WAAhB,aAGJ,kBAACQ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGZ,UAAU,gBAC1B,yBAAKA,UAAU,QACb,uCAAkB,6BAClB,0BAAMA,UAAU,WAAhB,YAGJ,kBAACQ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,yBAAKZ,UAAU,QACb,yBAAKqB,IAAI,uGAAwG,6BACjH,0CAGJ,kBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,yBAAKZ,UAAU,QACb,yBAAKqB,IAAI,wEAAyE,6BAClF,yCAGJ,kBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,yBAAKZ,UAAU,QACb,yBAAKqB,IAAI,sFAAuF,6BAChG,0CAGJ,kBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,yBAAKZ,UAAU,QACb,yBAAKqB,IAAI,2EAA4E,6BACrF,kDC7GMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.61595276.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.f169e164.mp3\";","import React, { useState, useEffect } from \"react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\n\nimport \"react-toastify/dist/ReactToastify.css\";\nimport audio from  './bg.mp3'\nimport \"./App.css\";\n\nfunction App() {\n  const notifySucces = () => toast.success(\"Reposta Correta\");\n  const notifyError = () => toast.error(\"Reposta Incorreta\");\n  const bgAudio = new Audio(audio);\n  bgAudio.volume = 0.6;\n  bgAudio.loop = true;\n\n  bgAudio.play();\n\n  const [respostas, setRespostas] = useState([\n    {\n      option: \"A\",\n      value: \"Encapsulamento\",\n      correct: true\n    },\n    {\n      option: \"B\",\n      value: \"Atributo Privado\",\n      correct: false\n    },\n    {\n      option: \"C\",\n      value: \"Atributo Protegido\",\n      correct: false\n    },\n    {\n      option: \"D\",\n      value: \"Atributo Abstrato\",\n      correct: false\n    },\n    {\n      option: \"E\",\n      value: \"Herança\",\n      correct: false\n    }\n  ]);\n\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"sm\" className=\"container\">\n        <ToastContainer\n          enableMultiContainer\n          position={toast.POSITION.TOP_RIGHT}\n        />\n        <Grid container spacing={2} >\n          <Grid item xs={12} style={{ textAlign: \"center\" }}></Grid>\n          <Grid item xs={12}>\n            <div className=\"question-card\">\n              <p className=\"question\">\n                Na programação como é chamado o conceito que protege um atributo\n                no modelo de Classes?\n              </p>\n            </div>\n          </Grid>\n          <Grid item xs={12}>\n            {respostas.map(resposta => (\n              <div className=\"answer\" key={resposta.option}>\n                <div\n                  className=\"option\"\n                  onClick={() => {\n                    if (resposta.correct) {\n                      notifySucces();\n                    } else {\n                      notifyError();\n                    }\n                  }}\n                >\n                  <span className=\"number\">{resposta.option}</span>\n                  <span className=\"text\"> {resposta.value}</span>\n                </div>\n              </div>\n            ))}\n          </Grid>\n          <Grid item xs={4} className=\"text-center \">\n            <div className=\"info\">\n              <span>Errar</span><br/>\n              <span className=\"valores\">PERDE TUDO</span>\n            </div>\n          </Grid>\n          <Grid item xs={4} className=\"text-center \">\n            <div className=\"info\">\n              <span>Acertar</span><br/>\n              <span className=\"valores\">100 MIL</span>\n            </div>\n          </Grid>\n          <Grid item xs={4} className=\"text-center \">\n            <div className=\"info\">\n              <span>Parar</span><br/>\n              <span className=\"valores\">50 MIL</span>\n            </div>\n          </Grid>\n          <Grid item xs={3} >\n            <div className=\"menu\">\n              <img src=\"http://icons.iconarchive.com/icons/icons-land/metro-raster-sport/256/Casino-Playing-Cards-icon.png\"  /><br/>\n              <span>Cartas</span>\n            </div>\n          </Grid>\n          <Grid item xs={3} >\n            <div className=\"menu\">\n              <img src=\"https://www.freeiconspng.com/uploads/right-arrow-icon-114837-11.png\"  /><br/>\n              <span>Pular</span>\n            </div>\n          </Grid>\n          <Grid item xs={3} >\n            <div className=\"menu\">\n              <img src=\"https://cdn0.iconfinder.com/data/icons/education-learning/128/123-blocks2-512.png\"  /><br/>\n              <span>Placas</span>\n            </div>\n          </Grid>\n          <Grid item xs={3} >\n            <div className=\"menu\">\n              <img src=\"https://cdn1.iconfinder.com/data/icons/ios-11-glyphs/30/people-512.png\"  /><br/>\n              <span>Convidados</span>\n            </div>\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}